#summary Links to free & open source Python game programming resources.
#labels Featured

==Python== 
  * [http://www.python.org/ Python] programming language by Guido van Rossum

  * Documentation:
    * [http://www.python.org/doc/ Python documentation]

  * Tutorials:
    * [http://docs.python.org/tutorial/ Official Python tutorial]
    * [http://diveintopython.org/ Dive into Python] by Mark Pilgrim
    * [http://www.greenteapress.com/thinkpython/thinkpython.html How to Think Like a Computer Scientist] by Allen B. Downey 

  * [http://wiki.python.org/moin/GameProgramming List of Python game programming tools]

  * [http://gpwiki.org/index.php/Python Python on the Game Programming Wiki]

==Pygame== 
  * [http://www.pygame.org/ Pygame] by Pete Shinners (Pygame is based on Sam Lantinga's [http://www.libsdl.org/ SDL] - Simple DirectMedia Layer)

  * Documentation:
    * [http://www.pygame.org/docs/ Pygame documentation]

  * Tutorials:
    * [http://www.pygame.org/wiki/tutorials Pygame tutorials]
    * [http://www.pygame.org/wiki/CookBook Pygame cookbook]
    * [http://rene.f0o.com/mywiki/PythonGameProgramming Python Game Programming] by Rene Dudfield & Geoff Howland
    * [http://inventwithpython.com/ Invent your own computer games with Python] by Albert Sweigart

  * [http://www.pygame.org/tags/libraries List of Pygame Libraries]

==Networking==
  * Documentation:
    * [http://docs.python.org/library/socket.html Socket] Low-level networking interface
    * [http://docs.python.org/library/socketserver.html SocketServer] framework for network servers

  * Protocols:
    * [http://en.wikipedia.org/wiki/User_Datagram_Protocol UDP] ("socket.SOCK_DGRAM") User Datagram Protocol
      * [http://xmpp.org/extensions/xep-0176.html Jingle ICE-UDP] Interactive Connectivity Establishment UDP Transport Method
        * PySoy uses ICE-UDP
      * [http://udt.sourceforge.net/index.html UDT] UDP-based Data Transfer 
        * [http://www.jenkinssoftware.com/raknet/index.html RakNet] (C++) uses UDT
      * [http://enet.bespin.org/ enet] builds a protocols on top of UDP (C++)
    * [http://twistedmatrix.com/documents/8.1.0/api/twisted.protocols.amp.html AMP] Asynchronous Messaging Protocol
      * [http://www.ripton.net/blog/?p=16 AMP chat example code] by David Ripton
      * [https://launchpad.net/game AMP game example code] by Christopher Armstrong & Jp Calderone
    * Notify: Torque Network Library protocol
      * [http://opentnl.sourceforge.net/doxydocs/fundamentals.html OpenTNL] & [http://github.com/nardo/tnl2 TNL2] (C++)
    * [http://en.wikipedia.org/wiki/Transmission_Control_Protocol TCP] ("socket.SOCK_STREAM") Transmission Control Protocol: In general, TCP is not advised for real-time action games. It is fine for turn-based games or for games where you don't have to aim for the opponent (such as WoW where you select a character/item and then click on the action/spell you want to use on it.)

  * Tutorials:
    * [http://www.devshed.com/c/a/Python/Sockets-in-Python-Into-the-World-of-Python-Network-Programming/ Sockets in Python] (UDP & TCP) by A.P.Rajshekhar
    * [http://ilab.cs.byu.edu/python/ Python network programming]  (UDP & TCP) by Daniel Zappala
    * [http://gafferongames.com/networking-for-game-programmers/ Networking for game programmers] by Glenn Fiedler: this tutorial uses C++ for its examples, but it gives a good explanation on how to build a protocol on top of UDP [http://www.gaffer.org/networking-for-game-programmers/virtual-connection-over-udp here] & [http://www.gaffer.org/networking-for-game-programmers/reliability-and-flow-control here]
      * [http://code.google.com/p/netgame/ tutorial C++ code]
    * [http://www.flipcode.com/archives/Network_Game_Programming-Issue_01_Things_that_make_you_go_hmm.shtml Network game programming] by Dan Royer: this is an old (1999) tutorial using C++ & TCP; UDP is briefly mentioned as a novelty. [http://www.gamedev.net/community/forums/topic.asp?topic_id=509977 Here]'s a follow-up discussion
    * [http://www.enchantedage.com/pymmo Write your own MMORPG in four hours using Python] (TCP) by Jon Watte

  * Libraries:
    * [http://twistedmatrix.com/trac/ Twisted framework] (UDP, AMP, TCP...)
      * [http://onlamp.com/pub/a/python/2006/08/10/untwisting-python-network-programming.html Untwisting Python network programming] by Kendrew Lau
      * [http://www.ibm.com/developerworks/linux/library/l-twist1.html Network programming with the Twisted framework] by David Mertz
      * [http://www.artima.com/weblogs/viewpost.jsp?thread=156396 Grokking Twisted] by Bruce Eckel
    * [http://www.pygame.org/project-Mastermind+Networking+Lib-859-.html Mastermind networking lib] (UDP & TCP) by Ian Mallett
      * [http://www.pygame.org/project-Spacewar+Multi-1025-.html Spacewar Multi] example game using TCP
    * [http://www.pygame.org/project-PygLibs.net-835-.html PygLibs.net] by RoeBros
    * [http://code.google.com/p/podsixnet/ Podsixnet game networking library] (TCP) by Chris McCormick
    * [http://wiki.secondlife.com/w/index.php?title=Eventlet&oldid=51543 Eventlet] is a HTTP networking library written in Python by Bob Ippolito, used in Second Life

  * [http://gafferongames.com/2009/01/25/game-networking-resources/ List of network resources] by Glenn Fiedler
    
==Physics==
  * Tutorial:
    * [http://gafferongames.com/game-physics/ Game physics tutorial] by Glenn Fiedler is a good introduction (examples in C++) to the concepts and algorithms of game physics 

  * Libraries:
    * [http://www.box2d.org/ Box2D]
      * [http://www.pygame.org/project-pyBox2D-723-.html Pybox2D] Python bindings for Box2D by Ken Lauer
    * [http://www.ode.org/ ODE 3D] Open Dynamics Engine
      * [http://pyode.sourceforge.net/ Pyode] Python bindings for ODE 3D
    * [http://bulletphysics.org/wordpress/ Bullet 3D] by Erwin Coumans, ([http://code.google.com/p/bullet/ code]) 
      * Blender 3D provides a [http://wiki.blender.org/index.php/Doc:Manual/Game_Engine/Python_API/Bullet_physics Python API] for Bullet 3D

  * [http://www.adrianboeing.com/pal/index.html PAL: Physics Abstraction Layer] by Adrian Boeing

==Graphics==
  * Documentation:
    * [http://www.opengl.org/documentation/ OpenGL documentation]
    * [http://pyopengl.sourceforge.net/documentation/ PyOpenGL documentation]

  * Tutorials:
    * [http://nehe.gamedev.net/ NeHe OpenGL tutorial] 
      * [http://www.pygame.org/gamelets/games/nehe1-10.zip NeHe Python code]
    * [http://anomtech.uuuq.com/Index.php?page=Tutorials Anomalistic Technologies OpenGL Tutorial]

  * Libraries:
    * [http://pyopengl.sourceforge.net/ PyOpenGL]
      * You may want to use [http://numpy.scipy.org/ NumPy] for [http://www.ruthless.zathras.de/facts/apps/polygonesia/3d-transformation-matrix.php matrix transformations]
    * [http://pyglet.org/ Pyglet multimedia library], the funtionality of Pyglet largely overlaps with Pygame's funtionality, but Pyglet is written in pure Python and does not rely on the SDL as Pygame does.
      * [http://www.learningpython.com/2007/11/10/creating-a-game-with-pyglet-and-python/ Pyglet game programming tutorial]
    * [http://code.google.com/p/pgu/ PGU] Phil's pyGame Utilities by Phil Hassey & Peter Rogers
    * [http://code.google.com/p/pygl2d/ PyGL2D] by PyMike
    * [http://www.pygame.org/project-glLib+Reloaded-1326-.html glLib Reloaded] by Ian Mallett

  * 2D engines:
    * [http://matthewmarshall.org/projects/rabbyt/ Rabbyt fast sprite engine] by Matthew Marshall
    * [http://www.grinninglizard.com/kyra/ Kyra] sprite engine, based on the SDL
      * [http://www.alobbs.com/pykyra Pykyra] Python bindings for Kyra by Alvaro Lopez Ortega
    * [http://code.google.com/p/flamingoengine/ Flamingo] and [http://pygame.org/project-Opossum+Engine-1340-.html Opossum] 2D game engines by Bradley Zeis
    * Tonk Engine

  * 2.5D isometric engines:
    * [http://www.fifengine.de/ FIFE] Flexible Isometric Free Engine
    * [http://www.pygame.org/project-Isomyr-1316-.html Isomyr] by Duncan McGreggor
    * [http://www.pygame.org/project-pyTile-871-.html PyTile] by Timothy Baldock

  * 3D engines:
    * [http://www.ogre3d.org/ Ogre] Object-Oriented Graphics Rendering Engine
      * [http://www.ogre3d.org/wiki/index.php/PyOgre PyOgre] Python bindings for Ogre
    * [http://www.crystalspace3d.org/main/Main_Page Crystal Space 3D] can use both the ODE 3D and Bullet 3D physics engines
      * [http://www.crystalspace3d.org/main/PyCrystal PyCrystal] Python bindings for Crystal Space 3D
    * [http://irrlicht.sourceforge.net/ Irrlicht] by Nikolaus Gebhardt
      * [https://opensvn.csie.org/traccgi/pyrr Pyrr] Python bindings for Irrlicht (out of date & no longer maintained)
    * [http://www.panda3d.org/ Panda 3D] by Disney Imagineering & Carnegie-Mellon's Entertainment Technology Center
    * [http://home.gna.org/oomadness/en/soya3d/index.html Soya 3D] by Jean-Baptiste Lamy
    * [http://www.pysoy.org/ PySoy 3D] is a fork of Soya 3D
    * [http://www.pygame.org/project-PYGGEL-968-.html PYGGEL] Python Graphical Game Engine + Libraries by RoeBros

  * 3D content creation:
    * [http://www.blender.org/ Blender 3D] content creation suite
      * [http://wiki.blender.org/index.php/Doc:Manual/Extensions/Python Blender 3D Python scripting]
      * [http://wiki.blender.org/index.php/Extensions:Py/Scripts Blender 3D Python tutorials]
      * [http://www.ruthless.zathras.de/facts/apps/polygonesia/blender.php Death to usability, or learn Blender in 20 minutes nonetheless]

  * [http://www.vrplumber.com/py3d.py List of Python 3D Software]
  * [http://www.moddb.com/engines/ List of game engines] at Mod DB
  * [http://gpwiki.org/index.php/Game_Engines List of game engines] at Game Programming Wiki

==Graphical User Interface==
  * Libraries:
    * [http://wiki.python.org/moin/TkInter Python's standard TkInter GUI]
      * [http://www.informit.com/articles/article.aspx?p=27103&redir=1 Tutorial: Making a CD Player with pygame and Tkinter in Python] by Harvey Deitel & Paul Deitel
    * [http://www.pygame.org/project-Albow-338-853.html Albow] widgetry for PyGame & PyOpenGL by Gregory Ewing
    * [http://www.pygame.org/project-simple+game+gui-740-.html Simple Game GUI] by Canio Massimo Tristano
    * [http://www.pygame.org/project-RoeBros%27+GUI-656-.html Roebros' GUI]
    * [http://www.pygame.org/project-pqGUI-1026-.html pqGUI] by Poiuy Qwert

  * [http://wiki.python.org/moin/GuiProgramming List of Python GUI tools]
  * [http://www.pygame.org/tags/gui List of Pygame GUI tools]

==Artificial Intelligence==
  * Tutorials:
    * [http://www.policyalmanac.org/games/aStarTutorial.htm A* Pathfinding for Beginners] by Patrick Lester
    * [http://www.pxleyes.com/ext-tutorial/blender/10926/Game-Engine-AI-Part-1--Simple-Path.html Pathfinding in Blender 3D] by Giulia

  * Libraries:
    * [http://www.pygame.org/project-Theseus+V1.0-1426-2533.html Theseus] by Heiko Nolte
    * [http://www.pygame.org/project-Hex+stuff-773-.html Hex Stuff] by Francesco Mastellone
    * [http://www.pygame.org/project-AStar-195-.html AStar] by John Eriksson

  * [http://www.pygame.org/tags/ai List of AI resources] at Pygame

==Concurrency==

  * Documentation:
    * [http://docs.python.org/library/threading.html threading] Higher-level threading interface

  * Tutoral:
    * [http://www.devshed.com/c/a/Python/Basic-Threading-in-Python/ Basic Threading in Python] by Peyton McCullough

  * [http://www.stackless.com/ Stackless Python], by Christian Tismer, *replaces* the Python executable (usually [http://en.wikipedia.org/wiki/CPython CPython]). Stackless implements microthreads ("green threads"), co-routines, channels and serialization.
    * Stackless is being used by the [http://www.eveonline.com/ EVE Online] servers, presentations: [http://www.slideshare.net/Arbow/stackless-python-in-eve 2006], [http://us.pycon.org/2009/conference/schedule/event/91/ 2009]
  * [http://pypi.python.org/pypi/greenlet Greenlet] is a spin-off of Stackless, a version of CPython that supports micro-threads called "tasklets"
    * Greenlet is being used by the Second Life servers
  * [http://pypy.org/ PyPy] is a CPython replacement, written in Python. It implements a [http://en.wikipedia.org/wiki/Just-in-time_compilation JIT] compiler and also the features of Stackless.

  * [http://code.google.com/p/python-csp/ Python-CSP] implements [http://en.wikipedia.org/wiki/Communicating_sequential_processes Communicating Sequential Processes] on top of Python

==Compatibility==
  * [http://www.swig.org/ SWIG] (Simplified Wrapper and Interface Generator) is used to connect programs or libraries written in C/C++ with scripting languages such as Python.
  * [http://www.cosc.canterbury.ac.nz/greg.ewing/python/Pyrex/ Pyrex] lets you write code that mixes Python and C data types, and compiles it into a C extension for Python
  * [http://cython.org/ Cython] is a derivative of Pyrex
  * [http://pyinline.sourceforge.net/ PyInline] allows you to put source code from other programming languages directly "inline" in Python
  * [http://www.jython.org/ Jython] is an implementation of Python written in Java
  * [http://ironpython.net/ IronPython] is an implementation of Python targeting the .NET Framework & Mono, by Jim Hugunin
  * [http://www.py2exe.org/ py2exe] is a Python Distutils  extension which converts Python scripts into executable Windows programs
  * [http://code.google.com/p/pyplugin/ PyPlugin] is a simple plugin framework for Python
  

==Game development portals==
  * [http://www.gamedev.net/ GameDev.net]
  * [http://www.gamasutra.com/ Gamasutra.com]
  * [http://www.devmaster.net/ DevMaster.net]
  * [http://aigamedev.com/ AiGameDev.com]
  * [http://www.moddb.com/ ModDB.com]
  * [http://gpwiki.org/ Game Programming Wiki]